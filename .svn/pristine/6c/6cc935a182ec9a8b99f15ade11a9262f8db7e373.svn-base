import { useEffect, useState } from "react";
import { API } from "../../../Ajax";
import useFetchData from "../../../components/useFetchData";
import { IParmsDuplicate, partial_parms } from "../Sections";
import { AnalyticsData, IMovies } from "./HomeTypes";

var obj_in_page_device: number = 0;
var obj_in_page_media: number = 0;

export function ensureParms(arr1: IParmsDuplicate[] | IParmsDuplicate[][], dt_format: string, obj_in_page?: string) {
    partial_parms[1].value = dt_format;
  
    if (obj_in_page === "device") {
      partial_parms[4].value = obj_in_page_device
    }
  
    if (obj_in_page === "media") {
      if (obj_in_page_media !== 0) {
        partial_parms[4].value = obj_in_page_media
      } else {
        partial_parms[4].value = 10
      }
    }
  
    let a: IParmsDuplicate[];
  
    if (Array.isArray(arr1[0])) {
      a = (arr1 as IParmsDuplicate[][]).reduce((acc, val) => acc.concat(val), []);
    } else {
      a = arr1 as IParmsDuplicate[];
    }
  
    a = a.concat(partial_parms);
    return JSON.stringify(a);
  }

export const useFetchAnalyticsData = () => {
    const [data, setData] = useState<AnalyticsData | null>(null);
    const devicesFetch = useFetchData<any>("Analytics/Analytics.vtt", 'get', { action: "getCloudSeemetrix", source: "seemetrix", base_url: "", user: API.user_id, method: "devices", parms: "" });
    const moviesFetch = useFetchData<IMovies>("Analytics/Analytics.vtt", 'get', { action: "getCloudSeemetrix", source: "seemetrix", base_url: "", user: API.user_id, method: "movies", parms: "" });
  
    useEffect(() => {
      if (devicesFetch.data && moviesFetch.data) {
  
        obj_in_page_device = devicesFetch.data.offline_total + devicesFetch.data.online_total
        obj_in_page_media = moviesFetch.data.used_total + moviesFetch.data.not_used_total
        setData({
          devices: devicesFetch.data,
          movies: moviesFetch.data,
        });
      }
    }, [devicesFetch.data, moviesFetch.data]);
  
    return data;
  };