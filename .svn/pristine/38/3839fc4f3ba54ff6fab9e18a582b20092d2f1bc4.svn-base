import { createTheme, ThemeProvider } from '@mui/material';
import React from 'react';
import { TreeNode } from 'react-treebeard';
import useFetchData from '../../../components/useFetchData';
import { StructureTreeNo, TreeNodeResp } from '../UploadFranqueado/UploadFranqueadoTypes';
import { useUploadFranqueado } from '../UploadFranqueado/useUploadFranqueado';
import TreeView from './TreeView';
import ZoneFiles from './ZoneFiles';


interface IArquivo {
  onlyZoneFiles?: boolean;
  hasContextMenu?: boolean;
}

const useViewExplorer = (cod_pai: number) => {
  const params = new URLSearchParams({
    cod_arquivo_estrutura_pai: cod_pai.toString(),
    type: 'view_arquivoexplorer',
    EArquivoUtilizacao: 'Usuario',
    action: 'load'
  }).toString();

  const method_ = "Arquivo/ArquivoEstrutura.vtt"
  const url = `${method_}?${params}`;

  return useFetchData<TreeNodeResp>(url, 'GET');
}


const Arquivo: React.FC<IArquivo> = ({ onlyZoneFiles = false, hasContextMenu = true }) => {
  console.log("render Arquivo")
  const {

    handleDropChange,
    handleOpenModal,
    filesUploaded,
    setFilesUploaded,
    CodFather,
    activeNode,
    setCodFather,
    setActiveNode,
    TreePanel,
    setTreePanel,
    Context
  } = useUploadFranqueado();

 
  const ViewExplorer = useViewExplorer(CodFather)

  if (ViewExplorer && ViewExplorer.data?.data) {
    setFilesUploaded(ViewExplorer.data.data)
   
  }

  const onToggle = (node: TreeNode, toggled: boolean) => {
    if (activeNode) {

      activeNode.active = false
    }
    setCodFather(node.cod_arquivo_estrutura)

    node.active = true;
    if (node.children) {
      node.toggled = toggled;
    }
    setActiveNode(node);
    if (TreePanel) {
      setTreePanel({ ...TreePanel });
    }


  };

  const handleCreateNewFolder = (newFolderName: string) => {
    if (newFolderName.trim() !== '' && activeNode) {
      const newFolder: TreeNode = {
        name: newFolderName,
        id: Date.now(),
        total: 0,
        e_orientacao: '',
        e_arquivo_tipo: '',
        cod_projeto: 0,
        cod_arquivo_estrutura_pai: 0,
        cod_arquivo_estrutura: 0,
        cod_arquivo: 0,
        arquivos: 0
      };
      const addFolder = (nodes: TreeNode[]): boolean => {
        for (const node of nodes) {
          if (node.id === activeNode.id) {
            node.children = node.children || [];
            node.children.push(newFolder);
            return true;
          }
          if (node.children && addFolder(node.children)) {
            return true;
          }
        }
        return false;
      };
      if (TreePanel) {
        addFolder(TreePanel.children || []);
        setTreePanel({ ...TreePanel });
      }

    }
  };

  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    event.stopPropagation();
  };

  const handleDropZoneFiles = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    handleDropChange(event);
    handleOpenModal(0);
    event.stopPropagation();
  };

  const handleCopy = () => console.log('Copiar');
  const handlePaste = () => console.log('Colar');
  const handleDelete = () => console.log('Excluir');

  const handleCreateCampaign = () => {
    // Logic to handle creating a campaign
  };

  const handleClickArchive = (file: StructureTreeNo | null) => {
    if (activeNode) {
      if (file?.e_arquivo_tipo === null) { // Verifica se o arquivo é uma pasta
        //onToggle(file, !file.toggled);
        setCodFather(file.cod_arquivo_estrutura);
        // Atualiza o estado do TreePanel com o conteúdo da pasta selecionada
       // const newTreePanel = transformDataToTree({ ...file }); // Ajuste conforme a estrutura de dados
        //setTreePanel(newTreePanel);
      } else {
        activeNode.active = false;
       // setActiveNode(null);
      }
    }
  };

  const ZoneFil = (
    <ZoneFiles
      handleClickArchiveProp={handleClickArchive}
      onCreateCampaign={handleCreateCampaign}
      files={filesUploaded}
      onDrop={handleDropZoneFiles}
      onDragOver={handleDragOver}
      onCreateFolder={handleCreateNewFolder}
      onCopy={handleCopy}
      onPaste={handlePaste}
      onDelete={handleDelete}
      hasContextMenu={hasContextMenu}
    />
  );

  return (
    <>
      {onlyZoneFiles ? (
        ZoneFil
      ) : (
        <ThemeProvider theme={createTheme()}>
          <div style={{ display: 'flex', flexDirection: 'column', height: '100vh' }}>
            <div style={{ display: 'flex', flex: 1 }}>
              {TreePanel && <TreeView data={TreePanel} onToggle={onToggle} />}
              {ZoneFil}
            </div>
          </div>
        </ThemeProvider>
      )}
    </>
  );
};

export default Arquivo;
