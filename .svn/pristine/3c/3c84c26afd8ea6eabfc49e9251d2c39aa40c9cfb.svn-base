import { Box, CircularProgress, Modal, Typography } from '@mui/material';
import { createContext, Dispatch, ReactNode, SetStateAction, useContext, useState } from 'react';
import { TreeNode } from 'react-treebeard';
import useFetchData from '../../../components/useFetchData';
import UploadModalForm from '../Arquivo/Modals/UploadModalForm';
import { modalStyle } from './UploadFranqueadoStyles';
import { IFormDataInp, StructureTreeNo, TreeNodeResp } from './UploadFranqueadoTypes';
import { useUploadFranqueado } from './useUploadFranqueado';

// Define the context and its default value
interface IUploadFranqueadoContext<T, > {
  files: StructureTreeNo[],
  setFiles: Dispatch<SetStateAction<StructureTreeNo[]>>,
  filesUploaded: StructureTreeNo[],
  setFilesUploaded: Dispatch<SetStateAction<StructureTreeNo[]>>,
  open: boolean,
  setOpen: Dispatch<SetStateAction<boolean>>,
  errorModalOpen: boolean,
  setErrorModalOpen: Dispatch<SetStateAction<boolean>>,
  loadingModal: boolean,
  setLoadingModal: Dispatch<SetStateAction<boolean>>,
  currentFileIndex: number | null,
  setCurrentFileIndex: Dispatch<SetStateAction<number | null>>,
  formError: boolean,
  setFormError: Dispatch<SetStateAction<boolean>>,
  FormDataInp: IFormDataInp,
  setFormDataInp: Dispatch<SetStateAction<IFormDataInp>>,
  errorMessages: string[],
  setErrorMessages: Dispatch<SetStateAction<string[]>>,
  errorFileNames: string[],
  setErrorFileNames: Dispatch<SetStateAction<string[]>>,
  activeNode: TreeNode | null,
  setActiveNode: Dispatch<SetStateAction<TreeNode | null>>,
  CodFather: number,
  setCodFather: Dispatch<SetStateAction<number>>,
  TreePanel: TreeNode | null,
  setTreePanel: Dispatch<SetStateAction<TreeNode | null>>,
   Context?: T[]
}





const valuesDefault: IUploadFranqueadoContext<any> = {
  files: [],
  setFiles: () => { },
  filesUploaded: [],
  setFilesUploaded: () => { },
  open: false,
  setOpen: () => { },
  errorModalOpen: false,
  setErrorModalOpen: () => { },
  loadingModal: false,
  setLoadingModal: () => { },
  currentFileIndex: null,
  setCurrentFileIndex: () => { },
  formError: false,
  setFormError: () => { },
  FormDataInp: {
    fileType: '',
    orientation: '',
    description: '',
    notes: ''
  },
  setFormDataInp: () => { },
  errorMessages: [],
  setErrorMessages: () => { },
  errorFileNames: [],
  setErrorFileNames: () => { },
  activeNode: null,
  setActiveNode: () => { },
  CodFather: 0,
  setCodFather: () => { },
  TreePanel: null,
  setTreePanel: () => { },
  Context: []
};

const UploadFranqueadoContext = createContext(valuesDefault);

interface IUploadFranqueadoProvider<T,> {
  children: ReactNode;
  TreePanelData?: TreeNodeResp;
  Context?: T[]
}



export const useTreePanel = () => {
  const method_ = "Arquivo/ArquivoEstrutura.vtt"
  const params = new URLSearchParams({
    type: 'tree_pastas_all',
    action: 'load'
  }).toString();
  const url = `${method_}?${params}`;
  return useFetchData<TreeNodeResp>(url, 'GET',
  );
}




// Create a provider component
export const UploadFranqueadoProvider = <T, >({ children, TreePanelData, Context }: IUploadFranqueadoProvider<T>) => {
  console.log('render useUploadFranqueadoContext')
  const [files, setFiles] = useState<StructureTreeNo[]>([]);
  //    const [codFather, setCodFather] = useState<number>(0);
  const [filesUploaded, setFilesUploaded] = useState<StructureTreeNo[]>([]);
  const [open, setOpen] = useState(false);
  const [errorModalOpen, setErrorModalOpen] = useState(false);
  const [loadingModal, setLoadingModal] = useState(false);
  const [currentFileIndex, setCurrentFileIndex] = useState<number | null>(null);
  const [formError, setFormError] = useState<boolean>(false);
  const [FormDataInp, setFormDataInp] = useState<IFormDataInp>({
    fileType: '',
    orientation: '',
    description: '',
    notes: ''
  });

  const { transformDataToTree } = useUploadFranqueado();

  const t = TreePanelData ? transformDataToTree(TreePanelData) : null

  const [activeNode, setActiveNode] = useState<TreeNode | null>(t);
  
  const [TreePanel, setTreePanel] = useState<TreeNode | null>(t);
  const [CodFather, setCodFather] = useState<number>(0)



  const handleCloseErrorModal = () => {
    setErrorModalOpen(false);
    setErrorFileNames([]);
    setErrorMessages([]);
  };



  //    const ViewExplorer = useViewExplorer(codF);

  const [errorMessages, setErrorMessages] = useState<string[]>([]);
  const [errorFileNames, setErrorFileNames] = useState<string[]>([]);

  return (
    <UploadFranqueadoContext.Provider value={{
      files, setFiles,
      filesUploaded, setFilesUploaded,
      open, setOpen,
      errorModalOpen, setErrorModalOpen,
      loadingModal, setLoadingModal,
      currentFileIndex, setCurrentFileIndex,
      formError, setFormError,
      FormDataInp, setFormDataInp,
      errorMessages, setErrorMessages,
      errorFileNames, setErrorFileNames,
      activeNode, setActiveNode,
      CodFather, setCodFather,
      TreePanel, setTreePanel,
      Context
    }}>
      {children}
      {
        <UploadModalForm open={open} />
      }


      {errorFileNames.length > 0 && (
        <Modal
          open={errorModalOpen}
          onClose={handleCloseErrorModal}
          aria-labelledby="error-modal-title"
          aria-describedby="error-modal-description"
        >
          <Box sx={modalStyle} style={{ maxHeight: "50vh", overflow: "scroll" }}>
            {errorFileNames.map((fileName, idx) => (
              <Box key={idx} sx={{ mb: 2 }}>
                <Typography id="error-modal-title" variant="h6" component="h2" color="rgb(31, 45, 61) ">
                  Erro no arquivo: {fileName}
                </Typography>
                <Typography id="error-modal-description" sx={{ mt: 2 }} color="rgb(31, 45, 61) ">
                  {errorMessages[idx]}
                </Typography>

              </Box>
            ))}
          </Box>
        </Modal>
      )}
      <Modal
        open={loadingModal}
        aria-labelledby="loading-modal-title"
        aria-describedby="loading-modal-description"
      >
        <Box sx={modalStyle}>
          <CircularProgress sx={{ margin: 'auto' }} />
          <Typography
            id="loading-modal-description"
            sx={{ mt: 2, fontFamily: 'Roboto, sans-serif', fontSize: '16px' }}
          >
            Validando seus arquivos, por favor, aguarde...
          </Typography>
        </Box>
      </Modal>
    </UploadFranqueadoContext.Provider>
  );
};

// Create a custom hook to use the context
export const useUploadFranqueadoContext = () => useContext(UploadFranqueadoContext);
