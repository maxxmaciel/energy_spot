import { useState } from 'react';
import { IMachines } from '../ArquivoTypes';


type TConfigurationModalState = 'currentConfigIndex' | 'mediaConfig' | 'screenConfigs' | 'openZoneFilesModal'

interface CreateCampaignState {
    campaignName: string;
    cliente: string;
    resumo: string;
    descricaoCompleta: string;
    capaResumida: File | null;
    capaCompleta: File | null;
    errors: { [key: string]: string };
    openLinkingMachinesModal: boolean;
}

interface ConfigurationModalState {
    currentConfigIndex: number;
    mediaConfig: { [key: number]: string };
    screenConfigs: { TotalTelas: number, count: number }[];
    openZoneFilesModal: boolean;

}

interface LinkingMachinesState {
    availableMachines: IMachines[];
    selectedMachines: IMachines[];
    isConfigModalOpen: boolean;
    isThankYouModalOpen: boolean;
    isScheduleConfig: boolean
}

interface MediaToPass {
    url_media: string;
}


export interface IFilteredConfigs {
    TotalTelas: number;
    count: number;
}



export interface UseModalsReturn {
    createCampaignState: CreateCampaignState;
    setCreateCampaignState: React.Dispatch<React.SetStateAction<CreateCampaignState>>;
    validate: () => boolean;
    handleCreateCampaign: () => void;
    handleConfirmClose: () => void;
    handleFileChange: (e: React.ChangeEvent<HTMLInputElement>, setFile: (file: File | null) => void) => void;
    linkingMachinesState: LinkingMachinesState;
    setLinkingMachinesState: React.Dispatch<React.SetStateAction<LinkingMachinesState>>;
    handleLinkingMachinesClose: () => void;
    handleDrop: (event: React.DragEvent<HTMLDivElement>, targetList: 'available' | 'selected') => void;
    handleDragStart: (event: React.DragEvent<HTMLDivElement>, machineName: string) => void;
    moveAllMachines: (targetList: 'available' | 'selected') => void;
    handleOpenConfigModal: () => void;
    handleMediaChange: (screen: number, media: string) => void;
    handleConfigConfirm: () => void;
    handleThankYouModalClose: () => void;
    handleScheduleConfig: () => void;
    handleScheduleConfirm: () => void;
    resetStates: () => void;
    calculateScreenConfigs: () => void;
    handleSetConfigurationModalState: <T, >(path: TConfigurationModalState) => (pred: T) => void;
    ConfigurationModalState: ConfigurationModalState;
    styleGlobalModal: React.CSSProperties | undefined;
}



const styleGlobalModal = {
    maxHeight: "90vh",
    overflow: "scroll",
}


const useModals = (onCloseCreateCampaign: () => void, onCreateCampaign: (campaign: CreateCampaignState) => void): UseModalsReturn => {
    const defaultCreateCampaignState: CreateCampaignState = {
        campaignName: '',
        cliente: '',
        resumo: '',
        descricaoCompleta: '',
        capaResumida: null,
        capaCompleta: null,
        errors: {},
        openLinkingMachinesModal: false,
    };

    const defaultLinkingMachinesState: LinkingMachinesState = {
        availableMachines: [
            {
                Maquina: 'Máquina 2',
                 TotalTelas: 1,
                 CodMaquina: 0,
                CodMaquinaPerfil: 0,
                MaquinaPerfil: '',
                TotalTelasHorz: 0,
                TotalTelasVert: 0
            },
            {
                Maquina: 'Máquina 3', TotalTelas: 3,
                CodMaquina: 0,
                CodMaquinaPerfil: 0,
                MaquinaPerfil: '',
                TotalTelasHorz: 0,
                TotalTelasVert: 0
            },
            {
                Maquina: 'Máquina 4', TotalTelas: 4,
                CodMaquina: 0,
                CodMaquinaPerfil: 0,
                MaquinaPerfil: '',
                TotalTelasHorz: 0,
                TotalTelasVert: 0
            },
            {
                Maquina: 'Máquina 1', TotalTelas: 4,
                CodMaquina: 0,
                CodMaquinaPerfil: 0,
                MaquinaPerfil: '',
                TotalTelasHorz: 0,
                TotalTelasVert: 0
            },
            {
                Maquina: 'Máquina 5', TotalTelas: 2,
                CodMaquina: 0,
                CodMaquinaPerfil: 0,
                MaquinaPerfil: '',
                TotalTelasHorz: 0,
                TotalTelasVert: 0
            },
            {
                Maquina: 'Máquina 6', TotalTelas: 5,
                CodMaquina: 0,
                CodMaquinaPerfil: 0,
                MaquinaPerfil: '',
                TotalTelasHorz: 0,
                TotalTelasVert: 0
            },
            {
                Maquina: 'Máquina 7', TotalTelas: 1,
                CodMaquina: 0,
                CodMaquinaPerfil: 0,
                MaquinaPerfil: '',
                TotalTelasHorz: 0,
                TotalTelasVert: 0
            },
        ],
        selectedMachines: [],
        isConfigModalOpen: false,
        isThankYouModalOpen: false,
        isScheduleConfig: false,
    };

    const defaultConfigurationModal = {
        currentConfigIndex: 0,
        mediaConfig: {},
        screenConfigs: [],
        openZoneFilesModal: false,

    }

    const [ConfigurationModalState, setConfigurationModalState] = useState<ConfigurationModalState>(defaultConfigurationModal);
    const [createCampaignState, setCreateCampaignState] = useState<CreateCampaignState>(defaultCreateCampaignState);
    const [linkingMachinesState, setLinkingMachinesState] = useState<LinkingMachinesState>(defaultLinkingMachinesState);


    const handleSetConfigurationModalState = <T,>(
        path: TConfigurationModalState) => {
        return (pred: T) => {
            setConfigurationModalState(prev => ({
                ...prev,
                [path]: pred
            }));
        }

    }

    const setScreenConfigs = handleSetConfigurationModalState<IFilteredConfigs[]>('screenConfigs');

    const sortMachines = (machines: IMachines[]) => {
        return machines.sort((a, b) => a.Maquina.localeCompare(b.Maquina));
    };

    const validate = (): boolean => {
        const newErrors: { [key: string]: string } = {};
        if (!createCampaignState.campaignName) newErrors.campaignName = 'Nome da Campanha é obrigatório.';
        if (!createCampaignState.cliente) newErrors.cliente = 'Cliente é obrigatório.';
        //   if (!createCampaignState.resumo) newErrors.resumo = 'Descrição Resumida é obrigatória.';
        //   if (!createCampaignState.descricaoCompleta) newErrors.descricaoCompleta = 'Descrição Completa é obrigatória.';
        //   if (!createCampaignState.capaResumida) newErrors.capaResumida = 'Capa Resumida é obrigatória.';
        //   if (!createCampaignState.capaCompleta) newErrors.capaCompleta = 'Capa Completa é obrigatória.';
        setCreateCampaignState(prev => ({ ...prev, errors: newErrors }));
        return Object.keys(newErrors).length === 0;
    };

    const handleCreateCampaign = () => {
        if (validate()) {
            onCreateCampaign(createCampaignState);
            setCreateCampaignState(prev => ({ ...prev, openLinkingMachinesModal: true }));
            onCloseCreateCampaign();
        }
    };

    const handleConfirmClose = () => {

        resetStates();
    };

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>, setFile: (file: File | null) => void) => {
        const file = e.target.files?.[0] || null;
        setFile(file);
    };

    const handleLinkingMachinesClose = () => {
        setLinkingMachinesState(prev => ({ ...prev, isConfigModalOpen: false }));
    };

    const handleDrop = (event: React.DragEvent<HTMLDivElement>, targetList: 'available' | 'selected') => {
        event.preventDefault();
        const machineName = event.dataTransfer.getData('text');
        const machine = targetList === 'available' ? linkingMachinesState.selectedMachines.find(m => m.Maquina === machineName) : linkingMachinesState.availableMachines.find(m => m.Maquina === machineName);
        if (machine) {
            if (targetList === 'selected' && !linkingMachinesState.selectedMachines.includes(machine)) {
                setLinkingMachinesState(prev => ({
                    ...prev,
                    selectedMachines: sortMachines([...prev.selectedMachines, machine]),
                    availableMachines: prev.availableMachines.filter((item) => item !== machine)
                }));
            } else if (targetList === 'available' && !linkingMachinesState.availableMachines.includes(machine)) {
                setLinkingMachinesState(prev => ({
                    ...prev,
                    availableMachines: sortMachines([...prev.availableMachines, machine]),
                    selectedMachines: prev.selectedMachines.filter((item) => item !== machine)
                }));
            }
        }
    };

    const handleDragStart = (event: React.DragEvent<HTMLDivElement>, machineName: string) => {
        event.dataTransfer.setData('text', machineName);
    };

    const moveAllMachines = (targetList: 'available' | 'selected') => {
        if (targetList === 'selected') {
            setLinkingMachinesState(prev => ({
                ...prev,
                selectedMachines: sortMachines([...prev.selectedMachines, ...prev.availableMachines]),
                availableMachines: []
            }));
        } else {
            setLinkingMachinesState(prev => ({
                ...prev,
                availableMachines: sortMachines([...prev.availableMachines, ...prev.selectedMachines]),
                selectedMachines: []
            }));
        }
    };

    const handleOpenConfigModal = () => {
        const configMap = new Map<number, number>();
        linkingMachinesState.selectedMachines.forEach(machine => {
            configMap.set(machine.TotalTelas, (configMap.get(machine.TotalTelas) || 0) + 1);
        });

        const configs = Array.from(configMap.entries())
            .map(([TotalTelas, count]) => ({ TotalTelas, count }))
            .sort((a, b) => a.TotalTelas - b.TotalTelas); // Sort ascending by TotalTelas

        const filteredConfigs = configs.filter(config => config.TotalTelas > 1);

        setLinkingMachinesState(prev => ({
            ...prev,
            screenConfigs: filteredConfigs,
            mediaConfig: {},
            currentConfigIndex: 0,
            isConfigModalOpen: true
        }));
    };

    const handleMediaChange = (screen: number, media: string) => {
        setConfigurationModalState(prev => ({
            ...prev,
            mediaConfig: { ...prev.mediaConfig, [screen]: media }
        }));
    };

    const handleConfigConfirm = () => {
        if (ConfigurationModalState.currentConfigIndex < ConfigurationModalState.screenConfigs.length - 1) {
            console.log("pass the pass")
            setConfigurationModalState(prev => ({
                ...prev,
                currentConfigIndex: prev.currentConfigIndex + 1
            }));

        } else {

            console.log('Confirmando configuração e abrindo modal de agradecimento');
            setLinkingMachinesState(prev => ({
                ...prev,
                isThankYouModalOpen: true,
                isConfigModalOpen: false
            }));
        }
    };

    const handleScheduleConfig = () => {
        console.log('Confirmando configuração e abrindo modal de schedule');
        setLinkingMachinesState(prev => ({
            ...prev,
            isConfigModalOpen: false,
            isScheduleConfig: true
        }));

    }

    const calculateScreenConfigs = () => {
        const configMap = new Map<number, number>();
        linkingMachinesState.selectedMachines.forEach(machine => {
            configMap.set(machine.TotalTelas, (configMap.get(machine.TotalTelas) || 0) + 1);
        });

        const configs = Array.from(configMap.entries())
            .map(([TotalTelas, count]) => ({ TotalTelas, count }))
            .sort((a, b) => a.TotalTelas - b.TotalTelas);

        //const filteredConfigs = configs.filter(config => config.TotalTelas > 1);
        setScreenConfigs(configs);

        /* if (filteredConfigs.length === 0 && selectedMachines.length > 0) {
             handleScheduleConfig();
             //handleConfigConfirm();
             // onClose();
             // resetStates();
         }*/
    };

    const handleScheduleConfirm = () => {

        if (ConfigurationModalState.currentConfigIndex >= ConfigurationModalState.screenConfigs.length - 1) {
            setLinkingMachinesState(prev => ({
                ...prev,
                isThankYouModalOpen: true,
                isScheduleConfig: false,

            }));
        } else {
            setLinkingMachinesState(prev => ({
                ...prev,
                isConfigModalOpen: true,
                isScheduleConfig: false,

            }));
        }

        setConfigurationModalState(prev => ({
            ...prev,
            currentConfigIndex: prev.currentConfigIndex + 1,
        }))
    }

    const handleThankYouModalClose = () => {
        console.log('Fechando modal de agradecimento useM');
        setLinkingMachinesState(prev => ({
            ...prev,
            isThankYouModalOpen: false
        }));
    };

    const resetStates = () => {
        setCreateCampaignState(defaultCreateCampaignState);
        setLinkingMachinesState({
            ...defaultLinkingMachinesState,
            availableMachines: sortMachines(defaultLinkingMachinesState.availableMachines),
        });
        setConfigurationModalState(defaultConfigurationModal);
        onCloseCreateCampaign();
    };



    return {
        createCampaignState,
        setCreateCampaignState,
        validate,
        handleCreateCampaign,
        handleConfirmClose,
        handleFileChange,
        linkingMachinesState,
        setLinkingMachinesState,
        handleLinkingMachinesClose,
        handleDrop,
        handleDragStart,
        moveAllMachines,
        handleOpenConfigModal,
        handleMediaChange,
        handleConfigConfirm,
        handleThankYouModalClose,
        handleSetConfigurationModalState,
        ConfigurationModalState,
        resetStates,
        handleScheduleConfig,
        handleScheduleConfirm,
        styleGlobalModal,
        calculateScreenConfigs
    };
};

export default useModals;
